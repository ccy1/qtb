package com.example.ntb.ui.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.example.ntb.ui.city.bean.PreferenceInfo;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PREFERENCE_INFO".
*/
public class PreferenceInfoDao extends AbstractDao<PreferenceInfo, Long> {

    public static final String TABLENAME = "PREFERENCE_INFO";

    /**
     * Properties of entity PreferenceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsParking = new Property(1, boolean.class, "isParking", false, "IS_PARKING");
        public final static Property IsFree = new Property(2, boolean.class, "isFree", false, "IS_FREE");
        public final static Property IsTime = new Property(3, boolean.class, "isTime", false, "IS_TIME");
        public final static Property StateType = new Property(4, int.class, "stateType", false, "STATE_TYPE");
        public final static Property Operate = new Property(5, int.class, "operate", false, "OPERATE");
    }


    public PreferenceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PreferenceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PREFERENCE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IS_PARKING\" INTEGER NOT NULL ," + // 1: isParking
                "\"IS_FREE\" INTEGER NOT NULL ," + // 2: isFree
                "\"IS_TIME\" INTEGER NOT NULL ," + // 3: isTime
                "\"STATE_TYPE\" INTEGER NOT NULL ," + // 4: stateType
                "\"OPERATE\" INTEGER NOT NULL );"); // 5: operate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PREFERENCE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PreferenceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsParking() ? 1L: 0L);
        stmt.bindLong(3, entity.getIsFree() ? 1L: 0L);
        stmt.bindLong(4, entity.getIsTime() ? 1L: 0L);
        stmt.bindLong(5, entity.getStateType());
        stmt.bindLong(6, entity.getOperate());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PreferenceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsParking() ? 1L: 0L);
        stmt.bindLong(3, entity.getIsFree() ? 1L: 0L);
        stmt.bindLong(4, entity.getIsTime() ? 1L: 0L);
        stmt.bindLong(5, entity.getStateType());
        stmt.bindLong(6, entity.getOperate());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PreferenceInfo readEntity(Cursor cursor, int offset) {
        PreferenceInfo entity = new PreferenceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // isParking
            cursor.getShort(offset + 2) != 0, // isFree
            cursor.getShort(offset + 3) != 0, // isTime
            cursor.getInt(offset + 4), // stateType
            cursor.getInt(offset + 5) // operate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PreferenceInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsParking(cursor.getShort(offset + 1) != 0);
        entity.setIsFree(cursor.getShort(offset + 2) != 0);
        entity.setIsTime(cursor.getShort(offset + 3) != 0);
        entity.setStateType(cursor.getInt(offset + 4));
        entity.setOperate(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PreferenceInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PreferenceInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PreferenceInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
